#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app'); // 加载 Express 应用实例
var debug = require('debug')('yunnan-energy-doc-toolkit:server');
var http = require('http');
const { initializeDatabase } = require('../database/setup'); // **导入数据库初始化函数**

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Initialize database and then listen on provided port, on all network interfaces.
 */

// console.log('[bin/www] 准备初始化数据库...');
initializeDatabase()
    .then(() => {
      // console.log('[bin/www] 数据库初始化成功。准备启动服务器...');
      server.listen(port);
      server.on('error', onError);
      server.on('listening', onListening);
    })
    .catch(err => {
      console.error("[bin/www] 关键错误: 数据库初始化失败，应用无法启动。");
      console.error(err);
      process.exit(1); // 数据库初始化失败则退出应用
    });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('[bin/www] ' + bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('[bin/www] ' + bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`[bin/www] 服务器正在运行，监听端口 ${port} (http://localhost:${port})`);
}
